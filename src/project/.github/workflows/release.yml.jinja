# Assemble the {{ project_name }} app for macOS and Windows using PyInstaller
# Apple app signing loosely based on the following guide:
# https://localazy.com/blog/how-to-automatically-sign-macos-apps-using-github-actions
# https://federicoterzi.com/blog/automatic-code-signing-and-notarization-for-macos-apps-using-github-actions/

name: release

on:
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"
      - "[0-9]+.[0-9]+.[0-9]+a[0-9]+"
      - "[0-9]+.[0-9]+.[0-9]+b[0-9]+"
      - "[0-9]+.[0-9]+.[0-9]+rc[0-9]+"

jobs:
  windows:
    runs-on: ${% raw %}{{ matrix.platform.runner }}{% endraw %}
    strategy:
      matrix:
        platform:
          - runner: windows-latest
            target: x64
          - runner: windows-latest
            target: arm64
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - name: Sync Dependencies
        run: uv sync

      - name: Make spec file
        run: uv run python scripts/pyinstaller.py -s

      - name: Build App
        run: uv run python scripts/pyinstaller.py -a

      - name: Create zip
        run: 7z a {{ project_name }}_${% raw %}{{ matrix.platform.target }}{% endraw %}.zip .\dist\{{ project_name }}.exe

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: {{ project_name }}_${% raw %}{{ matrix.platform.target }}{% endraw %}._Windows
          path: {{ project_name }}_${% raw %}{{ matrix.platform.target }}{% endraw %}.zip
          retention-days: 1

  macos:
    runs-on: ${% raw %}{{ matrix.platform.runner }}{% endraw %}
    strategy:
      matrix:
        platform:
          - runner: macos-13
            target: x86_64
          - runner: macos-latest
            target: aarch64
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - name: Sync Dependencies
        run: uv sync

      - name: macOS-Install the Apple signing certificate
        env:
          BUILD_CERTIFICATE_BASE64: ${% raw %}{{ secrets.BUILD_CERTIFICATE_BASE64 }}{% endraw %}
          P12_PASSWORD: ${% raw %}{{ secrets.P12_PASSWORD }}{% endraw %}
          KEYCHAIN_PASSWORD: ${% raw %}{{ secrets.KEYCHAIN_PASSWORD }}{% endraw %}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

      - name: Make spec file
        env:
          OSX_BUNDLE_IDENTIFIER: ${% raw %}{{ secrets.OSX_BUNDLE_IDENTIFIER }}{% endraw %}
          OSX_CODESIGN_IDENTITY: ${% raw %}{{ secrets.OSX_CODESIGN_IDENTITY }}{% endraw %}
        run: |
          TAG=$(uv run cz version -p)
          uv run python scripts/pyinstaller.py -s -v $TAG

      - name: Build App
        run: uv run python scripts/pyinstaller.py -a

      - name: macOS-Notarize and Staple app
        env:
          NOTARIZATION_USERNAME: ${% raw %}{{ secrets.NOTARIZATION_USERNAME }}{% endraw %}
          NOTARIZATION_TEAM_ID: ${% raw %}{{ secrets.NOTARIZATION_TEAM_ID }}{% endraw %}
          NOTARIZATION_PASSWORD: ${% raw %}{{ secrets.NOTARIZATION_PASSWORD }}{% endraw %}
        run: |
          # Store the notarization credentials so that we can prevent a UI password dialog
          # from blocking the CI

          echo "Create keychain profile"
          xcrun notarytool store-credentials "notarytool-profile" --apple-id "$NOTARIZATION_USERNAME" --team-id "$NOTARIZATION_TEAM_ID" --password "$NOTARIZATION_PASSWORD"

          # We can't notarize an app bundle directly, but we need to compress it as an archive.
          # Therefore, we create a zip file containing our app bundle, so that we can send it to the
          # notarization service

          echo "Creating temp notarization archive"
          ditto -c -k --keepParent "dist/{{ project_name }}.app" "{{ project_name }}.zip"

          # Here we send the notarization request to the Apple's Notarization service, waiting for the result.
          # This typically takes a few seconds inside a CI environment, but it might take more depending on the App
          # characteristics. Visit the Notarization docs for more information and strategies on how to optimize it if
          # you're curious

          echo "Notarize app"
          xcrun notarytool submit "{{ project_name }}.zip" --keychain-profile "notarytool-profile" --wait

          # Finally, we need to "attach the staple" to our executable, which will allow our app to be
          # validated by macOS even when an internet connection is not available.
          echo "Attach staple"
          xcrun stapler staple "dist/{{ project_name }}.app"

      - name: macOS-Create dmg
        run: uv run python scripts/pyinstaller.py -d -p ${% raw %}{{ matrix.platform.target }}{% endraw %}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: {{ project_name }}_${% raw %}{{ matrix.platform.target }}{% endraw %}
          path: {{ project_name }}_${% raw %}{{ matrix.platform.target }}{% endraw %}.dmg
          retention-days: 1

  generate-changelog:
    name: Generate Changelog
    runs-on: ubuntu-latest

    outputs:
      tag: ${% raw %}{{ steps.generate-changelog.outputs.tag }}{% endraw %}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - name: Sync Dependencies
        run: uv sync

      - name: Generate Changelog
        run: |
          TAG=$(uv run cz version -p)
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          (uv run cz changelog $TAG --dry-run; \
          cat .github/RELEASE_TEMPLATE/changelog_footer.md) \
          | sed "s/\[UNRELEASED\]/$TAG/" > release.md
          cat release.md

      - name: Upload changelog artifact
        uses: actions/upload-artifact@v4
        with:
          name: changelog
          path: release.md
          retention-days: 1

  create-release:
    name: Create Release
    needs: [ windows, macos, generate-changelog ]
    runs-on: ubuntu-latest

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true

      - run: ls -la

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${% raw %}{{ github.ref }}{% endraw %}
          repository: ${% raw %}{{ secrets.PUB_OWNER }}{% endraw $}/${% raw %}{{ secrets.PUB_REPO }}{% endraw %}
          token: ${% raw %}{{ secrets.APPLICATION_RELEASE_TOKEN }}{% endraw %}
          name: {{ project_name }} Release
          draft: false
          prerelease: false
          body_path: release.md
          files: |
            *.dmg
            *.zip
